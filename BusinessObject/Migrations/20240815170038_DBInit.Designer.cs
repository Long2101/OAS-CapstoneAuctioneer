// <auto-generated />
using System;
using BusinessObject.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(ConnectDB))]
    [Migration("20240815170038_DBInit")]
    partial class DBInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Model.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Warning")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.AccountDetail", b =>
                {
                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Avatar")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("BacksideCCCD")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("District")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FrontCCCD")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Ward")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AccountID");

                    b.ToTable("AccountDetails");
                });

            modelBuilder.Entity("BusinessObject.Model.AuctioneerDetail", b =>
                {
                    b.Property<int>("ListAuctioneerID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("EndDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberofAuctionRounds")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceStep")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("StartDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimePerLap")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ListAuctioneerID");

                    b.HasIndex("CategoryID");

                    b.ToTable("AuctioneerDetail");
                });

            modelBuilder.Entity("BusinessObject.Model.Bet", b =>
                {
                    b.Property<int>("BetID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BetID"));

                    b.Property<decimal>("PriceBit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RAID")
                        .HasColumnType("int");

                    b.HasKey("BetID");

                    b.HasIndex("RAID");

                    b.ToTable("Bet");
                });

            modelBuilder.Entity("BusinessObject.Model.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("NameCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BusinessObject.Model.Feedback", b =>
                {
                    b.Property<int>("RAID")
                        .HasColumnType("int");

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SatisfactionLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RAID");

                    b.HasIndex("AccountID");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("BusinessObject.Model.FileAttachments", b =>
                {
                    b.Property<int>("FileAID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileAID"));

                    b.Property<string>("FileAuctioneer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ListAuctioneerID")
                        .HasColumnType("int");

                    b.Property<string>("SignatureImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileAID");

                    b.HasIndex("ListAuctioneerID");

                    b.ToTable("FileAttachments");
                });

            modelBuilder.Entity("BusinessObject.Model.ListAuctioneer", b =>
                {
                    b.Property<int>("ListAuctioneerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ListAuctioneerID"));

                    b.Property<string>("Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manager")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NameAuctioneer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("StartingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("StatusAuction")
                        .HasColumnType("bit");

                    b.HasKey("ListAuctioneerID");

                    b.HasIndex("Creator");

                    b.HasIndex("Manager");

                    b.ToTable("ListAuctioneer");
                });

            modelBuilder.Entity("BusinessObject.Model.Notification", b =>
                {
                    b.Property<int>("NoticationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoticationID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NoticationID");

                    b.HasIndex("AccountID");

                    b.ToTable("Notications");
                });

            modelBuilder.Entity("BusinessObject.Model.Payment", b =>
                {
                    b.Property<int>("PayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PayID"));

                    b.Property<string>("PaymentDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RAID")
                        .HasColumnType("int");

                    b.HasKey("PayID");

                    b.HasIndex("RAID");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("BusinessObject.Model.RegistAuctioneer", b =>
                {
                    b.Property<int>("RAID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RAID"));

                    b.Property<string>("AccountID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("AuctionStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ListAuctioneerID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentTerm")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RAID");

                    b.HasIndex("AccountID");

                    b.HasIndex("ListAuctioneerID");

                    b.ToTable("RegistAuctioneer");
                });

            modelBuilder.Entity("BusinessObject.Model.TImage", b =>
                {
                    b.Property<int>("TImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TImageId"));

                    b.Property<int>("FileAID")
                        .HasColumnType("int");

                    b.Property<string>("Imange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TImageId");

                    b.HasIndex("FileAID");

                    b.ToTable("TImage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b83f5b15-893b-44c2-b241-42a65903dad6",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "fd67cf6f-eebb-4595-b6cf-b24a35366d6c",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "ProviderKey", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BusinessObject.Model.AccountDetail", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Account")
                        .WithOne("AccountDetail")
                        .HasForeignKey("BusinessObject.Model.AccountDetail", "AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObject.Model.AuctioneerDetail", b =>
                {
                    b.HasOne("BusinessObject.Model.Category", "Categorys")
                        .WithMany("AuctioneerDetails")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.ListAuctioneer", "ListAuctioneers")
                        .WithOne("AuctioneerDetails")
                        .HasForeignKey("BusinessObject.Model.AuctioneerDetail", "ListAuctioneerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorys");

                    b.Navigation("ListAuctioneers");
                });

            modelBuilder.Entity("BusinessObject.Model.Bet", b =>
                {
                    b.HasOne("BusinessObject.Model.RegistAuctioneer", "RegistAuctioneer")
                        .WithMany("Bets")
                        .HasForeignKey("RAID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegistAuctioneer");
                });

            modelBuilder.Entity("BusinessObject.Model.Feedback", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Accounts")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.RegistAuctioneer", "RegistAuctioneers")
                        .WithOne("Feedbacks")
                        .HasForeignKey("BusinessObject.Model.Feedback", "RAID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Accounts");

                    b.Navigation("RegistAuctioneers");
                });

            modelBuilder.Entity("BusinessObject.Model.FileAttachments", b =>
                {
                    b.HasOne("BusinessObject.Model.AuctioneerDetail", "AuctioneerDetails")
                        .WithMany("FileAttachments")
                        .HasForeignKey("ListAuctioneerID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AuctioneerDetails");
                });

            modelBuilder.Entity("BusinessObject.Model.ListAuctioneer", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "CreatorAccount")
                        .WithMany("CreatedAuctioneers")
                        .HasForeignKey("Creator")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("BusinessObject.Model.Account", "ManagerAccount")
                        .WithMany("ManagedAuctioneers")
                        .HasForeignKey("Manager")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CreatorAccount");

                    b.Navigation("ManagerAccount");
                });

            modelBuilder.Entity("BusinessObject.Model.Notification", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Accounts")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("BusinessObject.Model.Payment", b =>
                {
                    b.HasOne("BusinessObject.Model.RegistAuctioneer", "RegistAuctioneers")
                        .WithMany("Payments")
                        .HasForeignKey("RAID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RegistAuctioneers");
                });

            modelBuilder.Entity("BusinessObject.Model.RegistAuctioneer", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", "Accounts")
                        .WithMany("RegistAuctioneers")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.ListAuctioneer", "ListAuctioneers")
                        .WithMany("RegistAuctioneers")
                        .HasForeignKey("ListAuctioneerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounts");

                    b.Navigation("ListAuctioneers");
                });

            modelBuilder.Entity("BusinessObject.Model.TImage", b =>
                {
                    b.HasOne("BusinessObject.Model.FileAttachments", "FileAttachments")
                        .WithMany("TImages")
                        .HasForeignKey("FileAID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileAttachments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BusinessObject.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessObject.Model.Account", b =>
                {
                    b.Navigation("AccountDetail")
                        .IsRequired();

                    b.Navigation("CreatedAuctioneers");

                    b.Navigation("Feedbacks");

                    b.Navigation("ManagedAuctioneers");

                    b.Navigation("Notifications");

                    b.Navigation("RegistAuctioneers");
                });

            modelBuilder.Entity("BusinessObject.Model.AuctioneerDetail", b =>
                {
                    b.Navigation("FileAttachments");
                });

            modelBuilder.Entity("BusinessObject.Model.Category", b =>
                {
                    b.Navigation("AuctioneerDetails");
                });

            modelBuilder.Entity("BusinessObject.Model.FileAttachments", b =>
                {
                    b.Navigation("TImages");
                });

            modelBuilder.Entity("BusinessObject.Model.ListAuctioneer", b =>
                {
                    b.Navigation("AuctioneerDetails")
                        .IsRequired();

                    b.Navigation("RegistAuctioneers");
                });

            modelBuilder.Entity("BusinessObject.Model.RegistAuctioneer", b =>
                {
                    b.Navigation("Bets");

                    b.Navigation("Feedbacks")
                        .IsRequired();

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
